#!/usr/bin/env php
<?php

class ComposerSentinel
{
	private $sources;
	private $commands = array();

	public function loadConfig($config)
	{
		$this->sources = json_decode(@file_get_contents($config));
		if (!$this->sources) {
			throw new Exception("Can't load config: ".$config);
		}
	}

	public function addCommand($command, $description)
	{
		$this->commands[$command] = $description;
	}

	public function PrintUsage()
	{
		echo "Usage: ./composer-sentinel (config.json) command\n\n";
		ksort($this->commands);
		echo "Commands:\n";
		foreach ($this->commands as $command => $description) {
			echo "\t".$command.": ".$description."\n";
		}
		echo "\n";
		echo "Packages:\n";
		foreach ($this->sources->sources as $source) {
			echo "\t".$source->name;
			if (isset($source->type, $source->sourcee)) {
				echo ": ".$source->type." [".$source->source."]";
			}
			echo "\n";
		}
	}

	public function Pull()
	{
		$cwd = getcwd();
		$sourceLocation = rtrim($this->sources->archive->source, '/') . '/';
		if (!is_dir($sourceLocation)) {
			@mkdir($sourceLocation, 0755, true);
		}
		foreach ($this->sources->sources as $source) {
			if ($source->type == "git") {
				$location = $sourceLocation . $source->name;
				echo "Pulling sources for ".$source->name." (".$source->source.")\n";
				if (!is_dir($location)) {
					passthru("git clone ".$source->source." ".$location);
				} else {
					chdir($location);
					passthru("git pull");
					chdir($cwd);
				}
			}
		}
	}

	public function Build()
	{
		$cwd = getcwd();
		$sourceLocation = rtrim($this->sources->archive->source, '/') . '/';
		if (!is_dir($sourceLocation)) {
			@mkdir($sourceLocation, 0755, true);
		}
		$targetLocation = rtrim($this->sources->archive->target, '/') . '/';
		$fileLocation = $targetLocation . rtrim($this->sources->archive->directory, '/') . '/';
		if (!is_dir($fileLocation)) {
			@mkdir($fileLocation, 0755, true);
		} else {
			// clear previous build packages
			@unlink($targetLocation . "packages.json");
			array_map("unlink", glob($fileLocation . "*.tar"));
			array_map("unlink", glob($fileLocation . "*.zip"));
		}

		$packages = array();
		foreach ($this->sources->sources as $source) {
			$composer_config = $sourceLocation . $source->name . "/composer.json";
			if (!file_exists($composer_config)) {
				throw new Exception("File ".$composer_config." can't be found.");
			}

			$composer = json_decode(file_get_contents($composer_config));
			if (!$composer) {
				throw new Exception("File ".$composer_config." can't be parsed, error ".json_last_error());
			}

			$options = array("name", "description", "keywords", "authors", "license", "type", "require", "autoload");

			$package = (array)$composer;
			$package['time'] = date("Y-m-d H:i:s");
			$package['version'] = $this->generateVersion($package);

			echo "Building package ".$source->name." (".$package['version'].")\n";
			$package['dist'] = $this->BuildPackage($source->name, $package['version'], $package['version'], $sourceLocation, $fileLocation, $cwd);

			$dev = $package;
			$dev['version'] = 'dev-master';
			$dev['version_normalized'] = "9999999-dev";
			$dev['dist'] = $this->BuildPackage($source->name, $dev['version'], $dev['version_normalized'], $sourceLocation, $fileLocation, $cwd);

			$packages[$package['name']] = (object)array($package['version'] => (object)$package, "dev-master" => $dev);
		}
		echo "Writing out config\n";
		file_put_contents($targetLocation . "packages.json", $this->json_encode_pretty((object)(compact("packages"))));
		array_map("unlink", glob($sourceLocation . "*.tar"));
		array_map("unlink", glob($sourceLocation . "*.zip"));
		echo "Done.\n";
	}

	public function BuildPackage($source, $version, $version_normalized, $sourceLocation, $targetLocation, $cwd)
	{
		$filename = array();
		$filename["tar"] = $source . "-" . $version . ".tar";
		$filename["zip"] = str_replace(".tar", ".zip", $filename['tar']);

		passthru("rm -rf .temp/");
		mkdir(".temp");
		passthru("rsync -a " . $sourceLocation . $source . "/ .temp/");
		passthru("find .temp/ -name '.git' | xargs --no-run-if-empty rm -rf");
		passthru("find .temp/ -name '.gitignore' -delete");
		passthru("find .temp/ -name '.gitmodules' -delete");

		$config = json_decode(file_get_contents(".temp/composer.json"), true);
		$config['version'] = $version;
		$config['version_normalized'] = $version_normalized;
		file_put_contents(".temp/composer.json", json_encode($config, JSON_PRETTY_PRINT));

		passthru("cd .temp && zip -qr ../" . basename($filename['zip']) . " ./ && cd .. && rm -rf .temp/");
		rename(basename($filename['zip']), $targetLocation . $filename['zip']);

		chdir($sourceLocation . $source);
		passthru("tar -cf ../" . $filename['tar'] . " --exclude .git --exclude .gitignore --exclude .gitmodules --exclude git_hooks ./");
		chdir($cwd);
		rename($sourceLocation . $filename['tar'], $targetLocation . $filename['tar']);

		$type = isset($this->sources->archive->format) ? $this->sources->archive->format : "tar";
		$url = rtrim($this->sources->archive->url, "/") . "/" . rtrim($this->sources->archive->directory, "/") . "/" . $filename[$type];
		$shasum = sha1_file($targetLocation . $filename[$type]);
		return (object)compact("type", "url", "shasum", "reference");
	}

	public function GenerateVersion($package)
	{
		$version = "1.0";
		if (isset($package['version'])) {
			$version = $package['version'];
		}
		return $version . "." . date("ymd.Hi");
	}

	private function json_encode_pretty($json_obj)
	{
		$tab = "  ";
		$new_json = "";
		$indent_level = 0;
		$in_string = false;
		$json = json_encode($json_obj);
		$len = strlen($json);
		for ($c = 0; $c < $len; $c++) {
			$char = $json[$c];
			switch($char) {
				case '{':
				case '[':
					if (!$in_string) {
						$new_json .= $char . "\n" . str_repeat($tab, $indent_level+1);
						$indent_level++;
					} else {
						$new_json .= $char;
					}
					break;
				case '}':
				case ']':
					if (!$in_string) {
						$indent_level--;
						$new_json .= "\n" . str_repeat($tab, $indent_level) . $char;
					} else {
						$new_json .= $char;
					}
					break;
				case ',':
					if (!$in_string) {
						$new_json .= ",\n" . str_repeat($tab, $indent_level);
					} else {
						$new_json .= $char;
					}
					break;
				case ':':
					if (!$in_string) {
						$new_json .= ": ";
					} else {
						$new_json .= $char;
					}
					break;
				case '"':
					if ($c > 0 && $json[$c-1] != '\\')
					{
						$in_string = !$in_string;
					}
				default:
					$new_json .= $char;
					break;
			}
		}
		$new_json = str_replace("\\/", "/", $new_json);
		return $new_json;
	}
}

try {
	$sentinel = new ComposerSentinel;

	$sentinel->addCommand("pull", "Pull the package sources from their repositories/locations.");
	$sentinel->addCommand("build", "Build the package repository.");

	if (isset($argv[1]) && !in_array($argv[1], array("pull", "build"))) {
		$sentinel->loadConfig($argv[1]);
		unset($argv[1]);
		$argv = array_values($argv);
		$argc --;
	} else {
		$sentinel->loadConfig(basename(__FILE__) . ".json");
	}

	if (!isset($argv[1])) {
		$sentinel->PrintUsage();
		die;
	}

	switch ($argv[1]) {
		case "pull":
			$sentinel->Pull();
			break;
		case "build":
			$sentinel->Build();
			break;
		default:
			$sentinel->PrintUsage();
			break;
	}
} catch (Exception $e) {
	echo "Exception: ".$e->getMessage()."\n";
	die;
}
